# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

import random

def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def generate_blum_integer():
    """Generate a Blum integer (product of two primes congruent to 3 mod 4)."""
    while True:
        p = random.randint(100, 999)
        q = random.randint(100, 999)
        if is_prime(p) and is_prime(q) and p % 4 == 3 and q % 4 == 3:
            return p * q

def blum_blum_shub(seed, length, n):
    """Generate pseudorandom bits using Blum Blum Shub."""
    x = seed % n
    random_bits = []
    for _ in range(length):
        x = (x ** 2) % n
        random_bits.append(x % 2)
    return random_bits

# Example usage
n = generate_blum_integer()
seed = random.randint(1, n - 1)
length = 16  # Number of random bits to generate

random_bits = blum_blum_shub(seed, length, n)
print("Generated random bits:", random_bits)



###################################################3
The output is 
Generated random bits: [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0]

